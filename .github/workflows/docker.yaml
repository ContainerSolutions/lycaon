name: Docker Images

on:
  push:
    branches:
    - master

jobs:
  upload_images:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Login to package repos
      run: |
          echo "${{secrets.GITHUB_TOKEN}}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin
          echo "${{secrets.DOCKERHUB_PASS}}" | docker login -u ${{secrets.DOCKERHUB_USER}} --password-stdin
    - name: Install buildx
      run: |
          mkdir -p ~/.docker/cli-plugins
          curl -fSL -o docker-buildx https://github.com/docker/buildx/releases/download/v0.4.1/buildx-v0.4.1.linux-amd64
          echo "3f4e77686659766a0726b5a47a87e2cc14c86ebf15abf7f19c45d23b0daff222 *docker-buildx" | sha256sum -c -
          mkdir -p ~/.docker/cli-plugins
          mv docker-buildx ~/.docker/cli-plugins/
          chmod +x ~/.docker/cli-plugins/docker-buildx
    - name: Install manifest-tool
      run: |
         curl -fSL -o ./manifest-tool https://github.com/estesp/manifest-tool/releases/download/v1.0.2/manifest-tool-linux-amd64
         curl -fSL -o ./manifest-tool.asc https://github.com/estesp/manifest-tool/releases/download/v1.0.2/manifest-tool-linux-amd64.asc
         export GNUPGHOME="$(mktemp -d)"
         gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys 27F3EA268A97867EAF0BD05C0F386284C03A1162
         gpg --batch --verify manifest-tool.asc manifest-tool
         chmod +x ./manifest-tool
         rm manifest-tool.asc
    - name: Build and push multi-arch
      run: |
          ./docker/multi-arch.sh
          docker image prune -f
    - name: Build and push amd64 default target
      run: |
          ./docker/build.sh
    - name: Push multi-arch image
      run: |
         ./manifest-tool push from-spec ./docker/manifest.tmpl
  conformance_tests:
    services:
      trow:
        image: containersol/trow:notls
    needs: upload_images    
    runs-on: ubuntu-latest
    steps:
      - name: Run OCI Distribution Spec conformance tests
        uses: opencontainers/distribution-spec@master
        env:
          OCI_ROOT_URL: http://trow:8000
          OCI_NAMESPACE: oci-conformance/distribution-test
          OCI_TEST_PULL: 1
          OCI_TEST_PUSH: 1
          OCI_TEST_CONTENT_DISCOVERY: 1
          OCI_TEST_CONTENT_MANAGEMENT: 1
          OCI_HIDE_SKIPPED_WORKFLOWS: 0
          OCI_DEBUG: 0
      - name: Copy Report
        run: mkdir -p .out/ && mv {report.html,junit.xml} .out/
        if: always()
      - name: Upload test results zip as build artifact
        uses: actions/upload-artifact@v1
        with:
          name: oci-test-results-${{ github.sha }}
          path: .out/
        if: always()
